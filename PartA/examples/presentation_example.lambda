# Basic arithmetic examples
1 + 1
(1 + 2) * 5
1 + 2 * 5

# Logical operations
True && True
True and False
False or True

# Boolean casted to integers
True + 1
False * 1

# Integers casted to booleans
True and (7 % 8)
False or (8 / 7)

# Logical and arithmetic expression that should evaluate to True
((2 + 3) * (4 - 1) > 10) && ((5 / 1) + 2 != 7) || (8 % 3 == 2)

# Recursive sum of 1 to 10, should be 55
Defun {'arguments': (n), 'name': 'sumRecursive'}
  (n == 1 ) or ( n + sumRecursive(n-1))

sumRecursive(10)

# generaic while loop
Defun {'name': 'while', 'arguments': (n,condition,step,func)}
  (!condition(step(n))*n) or func(n,while(step(n),condition,step,func))

# while loop sum of 1 to 10, should be 55
while(0,(Lambd x. x <= 10), (Lambd x. x + 1), (Lambd x,y. x + y))

# while loop factorial, should be 120
while(1,(Lambd x. x <= 5), (Lambd x. x + 1), (Lambd x,y. x * y))