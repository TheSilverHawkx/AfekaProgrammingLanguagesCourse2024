<program> ::= <statement_list>
<statement_list> ::= <statement> | <statement> <statement_list>

<statement> ::= <empty>
              | <lambda_decleration>
              | <function_declaration>
              | <logical_expr> 
              | "(" <statement> ")"

<lambda_decleration> ::= "(" "Lambd" <identifier> "." <logical_expr> ")"

<function_declaration> ::= "Defun" "{" <function_conf_name> "," <function_conf_args> "}" <logical_expr>
                         | "Defun" "{" <function_conf_args> "," <function_conf_name> "}" <logical_expr>

<function_conf_name> ::= "'" "name" "'" ":" "'" ID "'"
<function_conf_args> ::= "'" "arguments" "'" ":" "(" <formal_parameter_list> ")"

<formal_parameter_list> ::= <identifier> | <identifier> ',' | <identifier> ',' <formal_parameter_list>


<logical_expr>  ::= <compare_expr> | <compare_expr> <binary_op> <logical_expr>
<compare_expr>  ::= <additive_expr> | <additive_expr> <compare_op> <additive_expr>
<additive_expr> ::= <multiplicative_expr> | <multiplicative_expr> <addition_op> <additive_expr>
<multiplicative_expr> ::= <factor>
                        | <factor> <mult_op> <multiplicative_expr>
                        | <addition_op> <factor>

<factor> ::= <integer>
           | <boolean>
           | <function_call>
           | <identifier>
           | "(" <logical_expr> ")"
           | "!" <logical_expr>
           | "not" <logical_expr>

<function_call> ::= ID "(" <function_call_parameters> ")"
<function_call_parameters> ::= <logical_expr>
                             | <logical_expr> ","
                             | <logical_expr> "," <function_call_parameters>
                             | <empty>

<binary_op>     ::= "&&" | "||" | "or" | "and"
<compare_op>    ::= "==" | "!=" | ">" | "<" | ">=" | "<="
<addition_op>   ::= "+"  | "-" 
<mult_op>       ::= "*" | "/" | "%"
<integer>       ::= INTEGER_CONST
<identifier>    ::= ID
<boolean>       ::= BOOLEAN_CONST
<empty>         ::=